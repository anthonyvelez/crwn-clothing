{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyCgA3s7l1gkOZqa-VfDvjXI5fKOzbysqKg',\n  authDomain: 'crwn-db-d6ac5.firebaseapp.com',\n  databaseURL: 'https://crwn-db-d6ac5.firebaseio.com',\n  projectId: 'crwn-db-d6ac5',\n  storageBucket: 'crwn-db-d6ac5.appspot.com',\n  messagingSenderId: '250567083266',\n  appId: '1:250567083266:web:093e86891b6ad093d8ee1b'\n};\nexport const createUserProfileDocument = async (userAuth, ...additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  console.log(snapShot);\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionsAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/anthonyvelez/Desktop/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","console","log","exists","displayName","email","createdAt","Date","set","error","message","addCollectionsAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","auth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n\tapiKey            : 'AIzaSyCgA3s7l1gkOZqa-VfDvjXI5fKOzbysqKg',\n\tauthDomain        : 'crwn-db-d6ac5.firebaseapp.com',\n\tdatabaseURL       : 'https://crwn-db-d6ac5.firebaseio.com',\n\tprojectId         : 'crwn-db-d6ac5',\n\tstorageBucket     : 'crwn-db-d6ac5.appspot.com',\n\tmessagingSenderId : '250567083266',\n\tappId             : '1:250567083266:web:093e86891b6ad093d8ee1b'\n};\n\nexport const createUserProfileDocument = async (userAuth, ...additionalData) => {\n\tif (!userAuth) return;\n\n\tconst userRef = firestore.doc(`users/${userAuth.uid}`);\n\tconst snapShot = await userRef.get();\n\n\tconsole.log(snapShot);\n\n\tif (!snapShot.exists) {\n\t\tconst { displayName, email } = userAuth;\n\t\tconst createdAt = new Date();\n\n\t\ttry {\n\t\t\tawait userRef.set({\n\t\t\t\tdisplayName,\n\t\t\t\temail,\n\t\t\t\tcreatedAt,\n\t\t\t\t...additionalData\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log('error creating user', error.message);\n\t\t}\n\t}\n\n\treturn userRef;\n};\n\nexport const addCollectionsAndDocuments = async (collectionKey, objectsToAdd) => {\n\tconst collectionRef = firestore.collection(collectionKey);\n\tconst batch = firestore.batch();\n\n\tobjectsToAdd.forEach(obj => {\n\t\tconst newDocRef = collectionRef.doc();\n\t\tbatch.set(newDocRef, obj);\n\t});\n\n\treturn await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = collections => {\n\tconst transformedCollection = collections.docs.map(doc => {\n\t\tconst { title, items } = doc.data();\n\n\t\treturn {\n\t\t\trouteName : encodeURI(title.toLowerCase()),\n\t\t\tid        : doc.id,\n\t\t\ttitle,\n\t\t\titems\n\t\t};\n\t});\n\n\treturn transformedCollection.reduce((accumulator, collection) => {\n\t\taccumulator[collection.title.toLowerCase()] = collection;\n\t\treturn accumulator;\n\t}, {});\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}